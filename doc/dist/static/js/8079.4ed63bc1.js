(self["webpackChunkdoc"]=self["webpackChunkdoc"]||[]).push([[8079],{7204:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    node-key=\"id\"\n    default-expand-all\n    draggable\n    :data=\"data\"\n    :allow-drop=\"allowDrop\"\n    :allow-drag=\"allowDrag\"\n    @node-drag-start=\"handleDragStart\"\n    @node-drag-enter=\"handleDragEnter\"\n    @node-drag-leave=\"handleDragLeave\"\n    @node-drag-over=\"handleDragOver\"\n    @node-drag-end=\"handleDragEnd\"\n    @node-drop=\"handleDrop\"\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1',\n          }, {\n            id: 10,\n            label: '三级 1-1-2',\n          }],\n        }],\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1',\n        }, {\n          id: 6,\n          label: '二级 2-2',\n        }],\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1',\n        }, {\n          id: 8,\n          label: '二级 3-2',\n          children: [{\n            id: 11,\n            label: '三级 3-2-1',\n          }, {\n            id: 12,\n            label: '三级 3-2-2',\n          }, {\n            id: 13,\n            label: '三级 3-2-3',\n          }],\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n  methods: {\n    handleDragStart(node) {\n      console.log('drag start', node);\n    },\n    handleDragEnter(draggingNode, dropNode) {\n      console.log('tree drag enter: ', dropNode.label);\n    },\n    handleDragLeave(draggingNode, dropNode) {\n      console.log('tree drag leave: ', dropNode.label);\n    },\n    handleDragOver(draggingNode, dropNode) {\n      console.log('tree drag over: ', dropNode.label);\n    },\n    handleDragEnd(draggingNode, dropNode, dropType) {\n      console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n    },\n    handleDrop(draggingNode, dropNode, dropType) {\n      console.log('tree drop: ', dropNode.label, dropType);\n    },\n    allowDrop(draggingNode, dropNode, type) {\n      if (dropNode.data.label === '二级 3-1') {\n        return type !== 'inner';\n      }\n      return true;\n    },\n    allowDrag(draggingNode) {\n      return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n    },\n  },\n};\n<\/script>\n```"},9138:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    :data=\"data\"\n    :props=\"defaultProps\"\n    @node-click=\"handleNodeClick\"\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        label: '一级 1',\n        children: [{\n          label: '二级 1-1',\n          children: [{\n            label: '三级 1-1-1',\n          }],\n        }],\n      }, {\n        label: '一级 2',\n        children: [{\n          label: '二级 2-1',\n          children: [{\n            label: '三级 2-1-1',\n          }],\n        }, {\n          label: '二级 2-2',\n          children: [{\n            label: '三级 2-2-1',\n          }],\n        }],\n      }, {\n        label: '一级 3',\n        children: [{\n          label: '二级 3-1',\n          children: [{\n            label: '三级 3-1-1',\n          }],\n        }, {\n          label: '二级 3-2',\n          children: [{\n            label: '三级 3-2-1',\n          }],\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n  methods: {\n    handleNodeClick(data) {\n      console.log(data);\n    },\n  },\n};\n<\/script>\n```"},8317:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    :props=\"props\"\n    :load=\"loadNode\"\n    lazy\n    show-checkbox\n    @check-change=\"handleCheckChange\"\n  ></sec-tree>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      props: {\n        label: 'name',\n        children: 'zones',\n      },\n      count: 1,\n    };\n  },\n  methods: {\n    handleCheckChange(data, checked, indeterminate) {\n      console.log(data, checked, indeterminate);\n    },\n    handleNodeClick(data) {\n      console.log(data);\n    },\n    loadNode(node, resolve) {\n      if (node.level === 0) {\n        resolve([{ name: 'region1' }, { name: 'region2' }]);\n      } else if (node.level > 3) {\n        resolve([]);\n      } else {\n        let hasChild;\n        if (node.data.name === 'region1') {\n          hasChild = true;\n        } else if (node.data.name === 'region2') {\n          hasChild = false;\n        } else {\n          hasChild = Math.random() > 0.5;\n        }\n        setTimeout(() => {\n          let data;\n          if (hasChild) {\n            data = [{\n              name: `zone${this.count}`,\n            }, {\n              name: `zone${this.count += 1}`,\n            }];\n            this.count += 1;\n          } else {\n            data = [];\n          }\n          resolve(data);\n        }, 500);\n      }\n    },\n  },\n};\n<\/script>\n```"},7782:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    :props=\"props\"\n    :load=\"loadNode\"\n    lazy\n    show-checkbox\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      props: {\n        label: 'name',\n        children: 'zones',\n        isLeaf: 'leaf',\n      },\n    };\n  },\n  methods: {\n    loadNode(node, resolve) {\n      if (node.level === 0) {\n        resolve([{ name: 'region' }]);\n      } else if (node.level > 1) {\n        resolve([]);\n      } else {\n        setTimeout(() => {\n          const data = [{\n            name: 'leaf',\n            leaf: true,\n          }, {\n            name: 'zone',\n          }];\n\n          resolve(data);\n        }, 500);\n      }\n    },\n  },\n};\n<\/script>\n```"},460:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    show-checkbox\n    node-key=\"id\"\n    :data=\"data\"\n    :default-expanded-keys=\"[2, 3]\"\n    :default-checked-keys=\"[5]\"\n    :props=\"defaultProps\"\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1',\n          }, {\n            id: 10,\n            label: '三级 1-1-2',\n          }],\n        }],\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1',\n        }, {\n          id: 6,\n          label: '二级 2-2',\n        }],\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1',\n        }, {\n          id: 8,\n          label: '二级 3-2',\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n};\n<\/script>\n```"},671:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    show-checkbox\n    node-key=\"id\"\n    :data=\"data\"\n    :default-expanded-key=\"[2, 3]\"\n    :default-checked-key=\"[5]\"\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 2',\n        children: [{\n          id: 3,\n          label: '二级 2-1',\n          children: [{\n            id: 4,\n            label: '三级 3-1-1',\n          }, {\n            id: 5,\n            label: '三级 3-1-2',\n            disabled: true,\n          }],\n        }, {\n          id: 2,\n          label: '二级 2-2',\n          disabled: true,\n          children: [{\n            id: 6,\n            label: '三级 3-2-1',\n          }, {\n            id: 7,\n            label: '三级 3-2-2',\n            disabled: true,\n          }],\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n};\n<\/script>\n```"},6436:function(e){e.exports="```vue\n<template>\n  <div>\n    <sec-tree\n      ref=\"tree\"\n      node-key=\"id\"\n      highlight-current\n      show-checkbox\n      default-expand-all\n      :data=\"data\"\n      :props=\"defaultProps\"\n    ></sec-tree>\n    <div class=\"mt20\">\n      <sec-btn @click=\"getCheckedNodes\">通过 node 获取</sec-btn>\n      <sec-btn @click=\"getCheckedKeys\">通过 key 获取</sec-btn>\n      <sec-btn @click=\"setCheckedNodes\">通过 node 设置</sec-btn>\n      <sec-btn @click=\"setCheckedKeys\">通过 key 设置</sec-btn>\n      <sec-btn @click=\"resetChecked\">清空</sec-btn>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1',\n          }, {\n            id: 10,\n            label: '三级 1-1-2',\n          }],\n        }],\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1',\n        }, {\n          id: 6,\n          label: '二级 2-2',\n        }],\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1',\n        }, {\n          id: 8,\n          label: '二级 3-2',\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n  methods: {\n    getCheckedNodes() {\n      console.log(this.$refs.tree.getCheckedNodes());\n    },\n    getCheckedKeys() {\n      console.log(this.$refs.tree.getCheckedKeys());\n    },\n    setCheckedNodes() {\n      this.$refs.tree.setCheckedNodes([{\n        id: 5,\n        label: '二级 2-1',\n      }, {\n        id: 9,\n        label: '三级 1-1-1',\n      }]);\n    },\n    setCheckedKeys() {\n      this.$refs.tree.setCheckedKeys([3]);\n    },\n    resetChecked() {\n      this.$refs.tree.setCheckedKeys([]);\n    },\n  },\n};\n<\/script>\n```"},6527:function(e){e.exports="```vue\n<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 render-content</p>\n      <sec-tree\n        show-checkbox\n        default-expand-all\n        node-key=\"id\"\n        :data=\"data\"\n        :expand-on-click-node=\"false\"\n        :render-content=\"renderContent\"\n      ></sec-tree>\n    </div>\n    <div class=\"block\">\n      <p>使用 scoped slot</p>\n      <sec-tree\n        show-checkbox\n        default-expand-all\n        node-key=\"id\"\n        :data=\"data\"\n        :expand-on-click-node=\"false\"\n      >\n        <template #default=\"{ node, data }\">\n          <div class=\"custom-tree-node\">\n            <span>{{ node.label }}</span>\n            <span>\n              <sec-btn\n                type=\"text\"\n                size=\"mini\"\n                @click=\"append(data)\"\n              >Append</sec-btn>\n              <sec-btn\n                type=\"text\"\n                size=\"mini\"\n                @click=\"remove(node, data)\"\n              >Delete</sec-btn>\n            </span>\n          </div>\n        </template>\n      </sec-tree>\n    </div>\n  </div>\n</template>\n\n<script>\nlet id = 1000;\n\nexport default {\n  data() {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1',\n          }, {\n            id: 10,\n            label: '三级 1-1-2',\n          }],\n        }],\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1',\n        }, {\n          id: 6,\n          label: '二级 2-2',\n        }],\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1',\n        }, {\n          id: 8,\n          label: '二级 3-2',\n        }],\n      }],\n    };\n  },\n  methods: {\n    append(data) {\n      const newChild = { id, label: 'testtest', children: [] };\n      id += 1;\n      if (!data.children) {\n        this.$set(data, 'children', []);\n      }\n      data.children.push(newChild);\n    },\n    remove(node, data) {\n      const { parent } = node;\n      const children = parent.data.children || parent.data;\n      const index = children.findIndex((d) => d.id === data.id);\n      children.splice(index, 1);\n    },\n    renderContent(h, { node, data }) {\n      return h('span', {\n        class: 'custom-tree-node',\n      }, [h('span', node.label), h('span', [h('sec-btn', {\n        attrs: {\n          type: 'text',\n          size: 'mini',\n        },\n        on: {\n          click: () => {\n            this.append(data);\n          },\n        },\n      }, 'Append'), h('sec-btn', {\n        attrs: {\n          type: 'text',\n          size: 'mini',\n        },\n        on: {\n          click: () => {\n            this.remove(node, data);\n          },\n        },\n      }, 'Delete')])]);\n    },\n  },\n};\n<\/script>\n\n<style lang=\"less\" scoped>\n.custom-tree-container {\n  display: flex;\n\n  .block {\n    flex: 1;\n    padding: 8px 24px 24px;\n\n    > p {\n      text-align: center;\n      line-height: 4;\n    }\n  }\n\n  :deep(.custom-tree-node) {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n}\n</style>\n```"},6313:function(e){e.exports="```vue\n<template>\n  <div>\n    <sec-input v-model=\"filterText\" placeholder=\"输入关键字进行过滤\"></sec-input>\n    <sec-tree\n      ref=\"tree\"\n      class=\"mt20\"\n      default-expand-all\n      :data=\"data\"\n      :props=\"defaultProps\"\n      :filter-node-method=\"filterNode\"\n    ></sec-tree>\n  </div>\n</template>\n\n<script>\nimport { includes } from 'lodash';\n\nexport default {\n  data() {\n    return {\n      filterText: '',\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 4,\n          label: '二级 1-1',\n          children: [{\n            id: 9,\n            label: '三级 1-1-1',\n          }, {\n            id: 10,\n            label: '三级 1-1-2',\n          }],\n        }],\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 5,\n          label: '二级 2-1',\n        }, {\n          id: 6,\n          label: '二级 2-2',\n        }],\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 7,\n          label: '二级 3-1',\n        }, {\n          id: 8,\n          label: '二级 3-2',\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return includes(data.label, value);\n    },\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.tree.filter(val);\n    },\n  },\n};\n<\/script>\n```"},8211:function(e){e.exports="```vue\n<template>\n  <sec-tree\n    :data=\"data\"\n    :props=\"defaultProps\"\n    accordion\n    @node-click=\"handleNodeClick\"\n  ></sec-tree>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: [{\n        label: '一级 1',\n        children: [{\n          label: '二级 1-1',\n          children: [{\n            label: '三级 1-1-1',\n          }],\n        }],\n      }, {\n        label: '一级 2',\n        children: [{\n          label: '二级 2-1',\n          children: [{\n            label: '三级 2-1-1',\n          }],\n        }, {\n          label: '二级 2-2',\n          children: [{\n            label: '三级 2-2-1',\n          }],\n        }],\n      }, {\n        label: '一级 3',\n        children: [{\n          label: '二级 3-1',\n          children: [{\n            label: '三级 3-1-1',\n          }],\n        }, {\n          label: '二级 3-2',\n          children: [{\n            label: '三级 3-2-1',\n          }],\n        }],\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label',\n      },\n    };\n  },\n  methods: {\n    handleNodeClick(data) {\n      console.log(data);\n    },\n  },\n};\n<\/script>\n```"},3722:function(e,n,l){"use strict";l.d(n,{Z:function(){return s}});var a=function(){var e=this,n=e._self._c;return n("div",{staticClass:"doc-demo"},[n("div",{staticClass:"doc-demo-source"},[e._t("source")],2),n("div",{staticClass:"doc-demo-meta",class:{"is-expanded":e.isExpanded}},[e.$slots.default?n("div",{staticClass:"doc-demo-desc"},[e._t("default")],2):e._e(),n("markdown-it-vue",{attrs:{content:e.markdown}})],1),n("div",{staticClass:"doc-demo-control",on:{click:function(n){e.isExpanded=!e.isExpanded},keydown:function(n){e.isExpanded=!e.isExpanded}}},[e.isExpanded?n("i",{staticClass:"el-icon-caret-top"}):n("i",{staticClass:"el-icon-caret-bottom"}),n("span",[e.isExpanded?[e._v("隐藏代码")]:[e._v("显示代码")]],2)])])},d=[],t={props:{markdown:{type:String,default:""}},data(){return{isExpanded:!1}}},o=t,r=l(4940),c=(0,r.Z)(o,a,d,!1,null,null,null),s=c.exports},8079:function(e,n,l){"use strict";l.r(n),l.d(n,{default:function(){return Ae}});var a=function(){var e=this,n=e._self._c;return n("sec-block",{staticClass:"doc-block"},[n("h2",[e._v("Tree 树形控件")]),n("p",[e._v("用清晰的层级结构展示信息，可展开或折叠。")]),n("h3",[e._v("基础用法")]),n("p",[e._v("基础的树形结构展示。")]),n("DocDemo",{attrs:{markdown:e.demo1},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo1")]},proxy:!0}])}),n("h3",[e._v("可选择")]),n("p",[e._v("适用于需要选择层级时使用。")]),n("DocDemo",{attrs:{markdown:e.demo2},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo2")]},proxy:!0}])},[n("p",[e._v("本例还展示了动态加载节点数据的方法。")])]),n("h3",[e._v("懒加载自定义叶子节点")]),n("DocDemo",{attrs:{markdown:e.demo3},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo3")]},proxy:!0}])},[n("p",[e._v("由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree 某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。")])]),n("h3",[e._v("默认展开和默认选中")]),n("p",[e._v("可将 Tree 的某些节点设置为默认展开或默认选中。")]),n("DocDemo",{attrs:{markdown:e.demo4},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo4")]},proxy:!0}])},[n("p",[e._v("分别通过 "),n("code",[e._v("default-expanded-keys")]),e._v(" 和 "),n("code",[e._v("default-checked-keys")]),e._v(" 设置默认展开和默认选中的节点。需要注意的是，此时必须设置 "),n("code",[e._v("node-key")]),e._v("，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。")])]),n("h3",[e._v("禁用状态")]),n("p",[e._v("可将 Tree 的某些节点设置为禁用状态。")]),n("DocDemo",{attrs:{markdown:e.demo5},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo5")]},proxy:!0}])},[n("p",[e._v("通过 "),n("code",[e._v("disabled")]),e._v(" 设置禁用状态。")])]),n("h3",[e._v("树节点选择")]),n("DocDemo",{attrs:{markdown:e.demo6},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo6")]},proxy:!0}])},[n("p",[e._v("本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置 "),n("code",[e._v("node-key")]),e._v("。")])]),n("h3",[e._v("自定义节点内容")]),n("p",[e._v("节点的内容支持自定义，可以在节点区添加按钮或图标等内容。")]),n("DocDemo",{attrs:{markdown:e.demo7},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo7")]},proxy:!0}])},[n("p",[e._v("可以通过两种方法进行树节点内容的自定义："),n("code",[e._v("render-content")]),e._v(" 和 scoped slot。使用 "),n("code",[e._v("render-content")]),e._v(" 指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。使用 scoped slot 会传入两个参数 "),n("code",[e._v("node")]),e._v(" 和 "),n("code",[e._v("data")]),e._v("，分别表示当前节点的 Node 对象和当前节点的数据。")])]),n("h3",[e._v("节点过滤")]),n("p",[e._v("通过关键字过滤树节点。")]),n("DocDemo",{attrs:{markdown:e.demo8},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo8")]},proxy:!0}])},[n("p",[e._v("在需要对节点进行过滤时，调用 Tree 实例的 "),n("code",[e._v("filter")]),e._v(" 方法，参数为关键字。需要注意的是，此时需要设置 "),n("code",[e._v("filter-node-methods")]),e._v("，值为过滤函数。")])]),n("h3",[e._v("手风琴模式")]),n("p",[e._v("对于同一级的节点，每次只能展开一个。")]),n("DocDemo",{attrs:{markdown:e.demo9},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo9")]},proxy:!0}])}),n("h3",[e._v("可拖拽节点")]),n("p",[e._v("通过 draggable 属性可让节点变为可拖拽。")]),n("DocDemo",{attrs:{markdown:e.demo10},scopedSlots:e._u([{key:"source",fn:function(){return[n("Demo10")]},proxy:!0}])}),n("h3",[e._v("Attributes")]),n("sec-table",{staticClass:"doc-table",attrs:{data:e.attributes}},[n("sec-table-column",{attrs:{label:"参数",prop:"attr",width:"180"}}),n("sec-table-column",{attrs:{label:"说明"},scopedSlots:e._u([{key:"default",fn:function({row:l}){return[n("span",{domProps:{innerHTML:e._s(l.desc)}})]}}])}),n("sec-table-column",{attrs:{label:"类型",prop:"type",width:"300"}}),n("sec-table-column",{attrs:{label:"可选值",prop:"value",width:"80"}}),n("sec-table-column",{attrs:{label:"默认值",prop:"default",width:"80"}})],1),n("h3",[e._v("props")]),n("sec-table",{staticClass:"doc-table",attrs:{data:e.props}},[n("sec-table-column",{attrs:{label:"参数",prop:"attr",width:"100"}}),n("sec-table-column",{attrs:{label:"说明",prop:"desc"}}),n("sec-table-column",{attrs:{label:"类型",prop:"type",width:"260"}}),n("sec-table-column",{attrs:{label:"可选值",prop:"value",width:"80"}}),n("sec-table-column",{attrs:{label:"默认值",prop:"default",width:"80"}})],1),n("h3",[e._v("方法")]),n("p",[n("code",[e._v("Tree")]),e._v(" 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。"),n("code",[e._v("Tree")]),e._v(" 拥有如下方法：")]),n("sec-table",{staticClass:"doc-table",attrs:{data:e.methods}},[n("sec-table-column",{attrs:{label:"方法名",prop:"method",width:"220"}}),n("sec-table-column",{attrs:{label:"说明"},scopedSlots:e._u([{key:"default",fn:function({row:l}){return[n("span",{domProps:{innerHTML:e._s(l.desc)}})]}}])}),n("sec-table-column",{attrs:{label:"参数",width:"260"},scopedSlots:e._u([{key:"default",fn:function({row:l}){return[n("span",{domProps:{innerHTML:e._s(l.param)}})]}}])})],1),n("h3",[e._v("Events")]),n("sec-table",{staticClass:"doc-table",attrs:{data:e.events}},[n("sec-table-column",{attrs:{label:"事件名称",prop:"event",width:"220"}}),n("sec-table-column",{attrs:{label:"说明",prop:"desc"}}),n("sec-table-column",{attrs:{label:"回调参数",width:"450"},scopedSlots:e._u([{key:"default",fn:function({row:l}){return[n("span",{domProps:{innerHTML:e._s(l.param)}})]}}])})],1),n("h3",[e._v("Scoped Slot")]),n("sec-table",{staticClass:"doc-table",attrs:{data:e.scopedSlot}},[n("sec-table-column",{attrs:{label:"name",prop:"name",width:"220"}}),n("sec-table-column",{attrs:{label:"说明",prop:"desc"}})],1)],1)},d=[],t=l(3722),o=l(9138),r=l.n(o),c=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{data:e.data,props:e.defaultProps},on:{"node-click":e.handleNodeClick}})},s=[],i={data(){return{data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleNodeClick(e){console.log(e)}}},p=i,h=l(4940),u=(0,h.Z)(p,c,s,!1,null,null,null),b=u.exports,f=l(8317),m=l.n(f),v=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{props:e.props,load:e.loadNode,lazy:"","show-checkbox":""},on:{"check-change":e.handleCheckChange}})},k=[],y={data(){return{props:{label:"name",children:"zones"},count:1}},methods:{handleCheckChange(e,n,l){console.log(e,n,l)},handleNodeClick(e){console.log(e)},loadNode(e,n){if(0===e.level)n([{name:"region1"},{name:"region2"}]);else if(e.level>3)n([]);else{let l;l="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,setTimeout((()=>{let e;l?(e=[{name:`zone${this.count}`},{name:`zone${this.count+=1}`}],this.count+=1):e=[],n(e)}),500)}}}},g=y,x=(0,h.Z)(g,v,k,!1,null,null,null),_=x.exports,C=l(7782),N=l.n(C),D=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{props:e.props,load:e.loadNode,lazy:"","show-checkbox":""}})},w=[],T={data(){return{props:{label:"name",children:"zones",isLeaf:"leaf"}}},methods:{loadNode(e,n){0===e.level?n([{name:"region"}]):e.level>1?n([]):setTimeout((()=>{const e=[{name:"leaf",leaf:!0},{name:"zone"}];n(e)}),500)}}},P=T,z=(0,h.Z)(P,D,w,!1,null,null,null),S=z.exports,K=l(460),$=l.n(K),E=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{"show-checkbox":"","node-key":"id",data:e.data,"default-expanded-keys":[2,3],"default-checked-keys":[5],props:e.defaultProps}})},Z=[],L={data(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}}},O=L,H=(0,h.Z)(O,E,Z,!1,null,null,null),A=H.exports,M=l(671),j=l.n(M),I=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{"show-checkbox":"","node-key":"id",data:e.data,"default-expanded-key":[2,3],"default-checked-key":[5]}})},B=[],V={data(){return{data:[{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label"}}}},q=V,F=(0,h.Z)(q,I,B,!1,null,null,null),G=F.exports,J=l(6436),Q=l.n(J),R=function(){var e=this,n=e._self._c;return n("div",[n("sec-tree",{ref:"tree",attrs:{"node-key":"id","highlight-current":"","show-checkbox":"","default-expand-all":"",data:e.data,props:e.defaultProps}}),n("div",{staticClass:"mt20"},[n("sec-btn",{on:{click:e.getCheckedNodes}},[e._v("通过 node 获取")]),n("sec-btn",{on:{click:e.getCheckedKeys}},[e._v("通过 key 获取")]),n("sec-btn",{on:{click:e.setCheckedNodes}},[e._v("通过 node 设置")]),n("sec-btn",{on:{click:e.setCheckedKeys}},[e._v("通过 key 设置")]),n("sec-btn",{on:{click:e.resetChecked}},[e._v("清空")])],1)],1)},U=[],W={data(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}},methods:{getCheckedNodes(){console.log(this.$refs.tree.getCheckedNodes())},getCheckedKeys(){console.log(this.$refs.tree.getCheckedKeys())},setCheckedNodes(){this.$refs.tree.setCheckedNodes([{id:5,label:"二级 2-1"},{id:9,label:"三级 1-1-1"}])},setCheckedKeys(){this.$refs.tree.setCheckedKeys([3])},resetChecked(){this.$refs.tree.setCheckedKeys([])}}},X=W,Y=(0,h.Z)(X,R,U,!1,null,null,null),ee=Y.exports,ne=l(6527),le=l.n(ne),ae=function(){var e=this,n=e._self._c;return n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 render-content")]),n("sec-tree",{attrs:{"show-checkbox":"","default-expand-all":"","node-key":"id",data:e.data,"expand-on-click-node":!1,"render-content":e.renderContent}})],1),n("div",{staticClass:"block"},[n("p",[e._v("使用 scoped slot")]),n("sec-tree",{attrs:{"show-checkbox":"","default-expand-all":"","node-key":"id",data:e.data,"expand-on-click-node":!1},scopedSlots:e._u([{key:"default",fn:function({node:l,data:a}){return[n("div",{staticClass:"custom-tree-node"},[n("span",[e._v(e._s(l.label))]),n("span",[n("sec-btn",{attrs:{type:"text",size:"mini"},on:{click:function(n){return e.append(a)}}},[e._v("Append")]),n("sec-btn",{attrs:{type:"text",size:"mini"},on:{click:function(n){return e.remove(l,a)}}},[e._v("Delete")])],1)])]}}])})],1)])},de=[];let te=1e3;var oe={data(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}]}},methods:{append(e){const n={id:te,label:"testtest",children:[]};te+=1,e.children||this.$set(e,"children",[]),e.children.push(n)},remove(e,n){const{parent:l}=e,a=l.data.children||l.data,d=a.findIndex((e=>e.id===n.id));a.splice(d,1)},renderContent(e,{node:n,data:l}){return e("span",{class:"custom-tree-node"},[e("span",n.label),e("span",[e("sec-btn",{attrs:{type:"text",size:"mini"},on:{click:()=>{this.append(l)}}},"Append"),e("sec-btn",{attrs:{type:"text",size:"mini"},on:{click:()=>{this.remove(n,l)}}},"Delete")])])}}},re=oe,ce=(0,h.Z)(re,ae,de,!1,null,"73288e31",null),se=ce.exports,ie=l(6313),pe=l.n(ie),he=function(){var e=this,n=e._self._c;return n("div",[n("sec-input",{attrs:{placeholder:"输入关键字进行过滤"},model:{value:e.filterText,callback:function(n){e.filterText=n},expression:"filterText"}}),n("sec-tree",{ref:"tree",staticClass:"mt20",attrs:{"default-expand-all":"",data:e.data,props:e.defaultProps,"filter-node-method":e.filterNode}})],1)},ue=[],be=l(1888),fe={data(){return{filterText:"",data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}},methods:{filterNode(e,n){return!e||(0,be.includes)(n.label,e)}},watch:{filterText(e){this.$refs.tree.filter(e)}}},me=fe,ve=(0,h.Z)(me,he,ue,!1,null,null,null),ke=ve.exports,ye=l(8211),ge=l.n(ye),xe=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{data:e.data,props:e.defaultProps,accordion:""},on:{"node-click":e.handleNodeClick}})},_e=[],Ce={data(){return{data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleNodeClick(e){console.log(e)}}},Ne=Ce,De=(0,h.Z)(Ne,xe,_e,!1,null,null,null),we=De.exports,Te=l(7204),Pe=l.n(Te),ze=function(){var e=this,n=e._self._c;return n("sec-tree",{attrs:{"node-key":"id","default-expand-all":"",draggable:"",data:e.data,"allow-drop":e.allowDrop,"allow-drag":e.allowDrag},on:{"node-drag-start":e.handleDragStart,"node-drag-enter":e.handleDragEnter,"node-drag-leave":e.handleDragLeave,"node-drag-over":e.handleDragOver,"node-drag-end":e.handleDragEnd,"node-drop":e.handleDrop}})},Se=[],Ke={data(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2",children:[{id:11,label:"三级 3-2-1"},{id:12,label:"三级 3-2-2"},{id:13,label:"三级 3-2-3"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleDragStart(e){console.log("drag start",e)},handleDragEnter(e,n){console.log("tree drag enter: ",n.label)},handleDragLeave(e,n){console.log("tree drag leave: ",n.label)},handleDragOver(e,n){console.log("tree drag over: ",n.label)},handleDragEnd(e,n,l){console.log("tree drag end: ",n&&n.label,l)},handleDrop(e,n,l){console.log("tree drop: ",n.label,l)},allowDrop(e,n,l){return"二级 3-1"!==n.data.label||"inner"!==l},allowDrag(e){return-1===e.data.label.indexOf("三级 3-2-2")}}},$e=Ke,Ee=(0,h.Z)($e,ze,Se,!1,null,null,null),Ze=Ee.exports,Le={components:{DocDemo:t.Z,Demo1:b,Demo2:_,Demo3:S,Demo4:A,Demo5:G,Demo6:ee,Demo7:se,Demo8:ke,Demo9:we,Demo10:Ze},data(){return{demo1:r(),demo2:m(),demo3:N(),demo4:$(),demo5:j(),demo6:Q(),demo7:le(),demo8:pe(),demo9:ge(),demo10:Pe(),attributes:[{attr:"data",desc:"展示数据",type:"array",value:"—",default:"—"},{attr:"empty-text",desc:"内容为空的时候展示的文本",type:"string",value:"—",default:"—"},{attr:"node-key",desc:"每个树节点用来作为唯一标识的属性，整棵树应该是唯一的",type:"string",value:"—",default:"—"},{attr:"props",desc:"配置选项，具体看下表",type:"object",value:"—",default:"—"},{attr:"render-after-expand",desc:"是否在第一次展开某个树节点后才渲染其子节点",type:"boolean",value:"—",default:"true"},{attr:"load",desc:"加载子树数据的方法，仅当 lazy 属性为 true 时生效",type:"function(node, resolve)",value:"—",default:"—"},{attr:"render-content",desc:"树节点的内容区的渲染函数",type:"function(h, { node, data, store })",value:"—",default:"—"},{attr:"highlight-current",desc:"是否高亮当前选中节点",type:"boolean",value:"—",default:"false"},{attr:"default-expand-all",desc:"是否默认展开所有节点",type:"boolean",value:"—",default:"false"},{attr:"expand-on-click-node",desc:"是否在点击节点的时候展开或者收缩节点，默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。",type:"boolean",value:"—",default:"false"},{attr:"auto-expand-parent",desc:"展开子节点的时候是否自动展开父节点",type:"boolean",value:"—",default:"true"},{attr:"default-expanded-keys",desc:"默认展开的节点的 key 的数组",type:"array",value:"—",default:"—"},{attr:"show-checkbox",desc:"节点是否可被选择",type:"boolean",value:"—",default:"false"},{attr:"check-strictly",desc:"在显示复选框的情况下，是否严格的遵循父子不互相关联的做法",type:"boolean",value:"—",default:"false"},{attr:"default-checked-keys",desc:"默认勾选的节点的 key 的数组",type:"array",value:"—",default:"—"},{attr:"current-node-key",desc:"当前选中的节点",type:"string / number",value:"—",default:"—"},{attr:"filter-node-method",desc:"对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏",type:"function(value, data, node)",value:"—",default:"—"},{attr:"accordion",desc:"是否每次只打开一个同级树节点展开",type:"boolean",value:"—",default:"false"},{attr:"indent",desc:"相邻级节点间的水平缩进，单位为像素",type:"number",value:"—",default:"16"},{attr:"icon-class",desc:"自定义树节点的图标",type:"string",value:"—",default:"—"},{attr:"lazy",desc:"是否懒加载子节点，需与 load 方法结合使用",type:"boolean",value:"—",default:"false"},{attr:"draggable",desc:"是否开启拖拽节点功能",type:"boolean",value:"—",default:"false"},{attr:"allow-drag",desc:"判断节点是否可被拖拽",type:"function(node)",value:"—",default:"—"},{attr:"allow-drop",desc:"拖拽时判定目标节点是否可被放置。<code>type</code> 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后",type:"function(draggingNode, dropNode, type)",value:"—",default:"—"}],props:[{attr:"label",desc:"指定节点标签为节点对象的某个属性值",type:"string / function(data, node)",value:"—",default:"—"},{attr:"children",desc:"指定子树为节点对象的某个属性值",type:"string",value:"—",default:"—"},{attr:"disabled",desc:"指定节点选择框是否禁用为节点对象的某个属性值",type:"boolean / function(data, node)",value:"—",default:"—"},{attr:"isLeaf",desc:"指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效",type:"boolean / function(data, node)",value:"—",default:"—"}],methods:[{method:"filter",desc:"对树节点进行筛选操作",param:"接受一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数"},{method:"updateKeyChildren",desc:"通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性",param:"(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组"},{method:"getCheckedNodes",desc:"若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组",param:"(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code>"},{method:"setCheckedNodes",desc:"设置目前勾选的节点，使用此方法必须设置 node-key 属性",param:"(nodes) 接收勾选节点数据的数组"},{method:"getCheckedKeys",desc:"若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组",param:"(leafOnly) 接收一个 boolean 类型的参数，若为 <code>true</code> 则仅返回被选中的叶子节点的 keys，默认值为 <code>false</code>"},{method:"setCheckedKeys",desc:"通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性",param:"(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 <code>true</code> 则仅设置叶子节点的勾选状态，默认值为 <code>false</code>"},{method:"setChecked",desc:"通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性",param:"(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点，默认为 false"},{method:"getHalfCheckedNodes",desc:"若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前选中的节点所组成的数组",param:"—"},{method:"getHalfCheckedKeys",desc:"若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code），则返回目前半选中的节点所有组成的数组",param:"—"},{method:"getCurrentKey",desc:"获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null",param:"—"},{method:"getCurrentNode",desc:"获取当前被选中节点的 data，若没有节点被选中则返回 null",param:"—"},{method:"setCurrentKey",desc:"通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性",param:"(key) 待被选节点的 key，若为 null 则取消当前高亮的节点"},{method:"setCurrentNode",desc:"通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性",param:"(node) 待备选节点的 node"},{method:"getNode",desc:"根据 data 或者 key 拿到 Tree 组件中的 node",param:"(data) 要获得 node 的 key 或者 data"},{method:"remove",desc:"删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性",param:"(data) 要删除的节点的 data 或者 node"},{method:"append",desc:"为 Tree 中的一个节点追加一个子节点",param:"(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node"},{method:"insertBefore",desc:"为 Tree 的一个节点的前面增加一个节点",param:"(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node"},{method:"insertAfter",desc:"为 Tree 的一个节点的后面增加一个节点",param:"(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node"}],events:[{event:"node-click",desc:"节点被点击时的回调",param:"共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"},{event:"node-contextmenu",desc:"当某一节点被鼠标右键点击时会触发该事件",param:"共四个参数，依次为：event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。"},{event:"check-change",desc:"节点选中状态发生变化时的回调",param:"共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点"},{event:"check",desc:"当复选框被点击的时候触发",param:"共两个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性"},{event:"current-change",desc:"当前选中节点变化时触发的事件",param:"共两个参数，依次为：当前节点的数据，当前节点的 Node 对象"},{event:"node-expand",desc:"节点被展开时触发的事件",param:"共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身"},{event:"node-collapse",desc:"节点被关闭时触发的事件",param:"共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身"},{event:"node-drag-start",desc:"节点开始拖拽时触发的事件",param:"共两个参数，依次为：被拖拽节点对应的 Node、event"},{event:"node-drag-enter",desc:"拖拽进入其他节点时触发的事件",param:"共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event"},{event:"node-drag-leave",desc:"拖拽离开某个节点时触发的事件",param:"共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event"},{event:"node-drag-over",desc:"在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）",param:"共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event"},{event:"node-drag-end",desc:"拖拽结束时（可能未成功）触发的事件",param:"共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event"},{event:"node-drop",desc:"拖拽成功完成时触发的事件",param:"共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event"}],scopedSlot:[{name:"—",desc:"自定义树节点的内容，参数为 { node, data }"}]}}},Oe=Le,He=(0,h.Z)(Oe,a,d,!1,null,null,null),Ae=He.exports}}]);
//# sourceMappingURL=8079.4ed63bc1.js.map